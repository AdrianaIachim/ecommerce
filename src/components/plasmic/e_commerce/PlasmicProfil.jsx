// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2GyyV1uN4xbnqKtJ7pjrQU
// Component: WajwCXx2NK
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantscf27W7HxUbhqT } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -CF27w7hxUbhqT/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_e_commerce.module.css"; // plasmic-import: 2GyyV1uN4xbnqKtJ7pjrQU/projectcss
import sty from "./PlasmicProfil.module.css"; // plasmic-import: WajwCXx2NK/css
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 5mMk1vnowEUZeD/icon
import image2VTxSXlMaWua from "./images/image2.png"; // plasmic-import: vTxSXlMAWua/picture
import image3ImfGzJ8R3D2 from "./images/image3.jpg"; // plasmic-import: imfGzJ8R3D2/picture

export const PlasmicProfil__VariantProps = new Array();

export const PlasmicProfil__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProfil__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscf27W7HxUbhqT()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__h3SOb)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tmK2H)}
            >
              {true ? (
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__jqbXb
                  )}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__olQl8)}
                    displayHeight={"50px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"50px"}
                    src={{
                      src: image2VTxSXlMaWua,
                      fullWidth: 750,
                      fullHeight: 750,
                      aspectRatio: undefined
                    }}
                  />
                </a>
              ) : null}
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hClQn)}
              >
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__apV2E
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__iT97)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ukCl
                    )}
                  >
                    {"Listings"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__aUh9)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__exlrQ
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg___7FZKt)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j1Zw4
                    )}
                  >
                    {"Neighborhoods"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg___92NHn)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__meFg
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg___5Aqf)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uOrIt
                    )}
                  >
                    {"Agents"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__iNpp6)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__d3ZmA
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__oasAi)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fPjsC
                    )}
                  >
                    {"Contact"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__drL8K)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__sOnwu
                  )}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__vQdWc)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nmgKt
                    )}
                  >
                    {"Blog"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg___8MyTr)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__bcm0I
                  )}
                  href={"tel:+4733378901"}
                  target={"_blank"}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__wXzzs)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c9Wvn
                    )}
                  >
                    {"Call Us"}
                  </div>
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__oinGv)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xn8Lt)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__sjBY)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__osrRn)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ucXBw)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: image3ImfGzJ8R3D2,
                      fullWidth: 1920,
                      fullHeight: 1275,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__l68Tr)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___8SEj8)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Get in touch."}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gfoIv
                      )}
                    >
                      {
                        "A euismod eros a hendrerit tristique suscipit sit aptent dolor adipiscing inceptos cras ullamcorper a vivamus parturient."
                      }
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m5Np)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__y4C6
                          )}
                        >
                          <input
                            className={classNames(
                              projectcss.all,
                              projectcss.input,
                              sty.textInput__gmOgz
                            )}
                            placeholder={"First Name"}
                            size={1}
                            type={"text"}
                            value={""}
                          />

                          <input
                            className={classNames(
                              projectcss.all,
                              projectcss.input,
                              sty.textInput__ngIiL
                            )}
                            placeholder={"Last Name"}
                            size={1}
                            type={"text"}
                            value={""}
                          />
                        </p.Stack>
                      ) : null}
                      <input
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.textInput__qa9Vt
                        )}
                        placeholder={"Email address"}
                        size={1}
                        type={"text"}
                        value={""}
                      />

                      <input
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.textInput__nuHfv
                        )}
                        placeholder={"Phone number"}
                        size={1}
                        type={"text"}
                        value={""}
                      />

                      <textarea
                        data-plasmic-name={"textarea"}
                        data-plasmic-override={overrides.textarea}
                        className={classNames(
                          projectcss.all,
                          projectcss.textarea,
                          sty.textarea
                        )}
                        placeholder={"Message"}
                        value={""}
                      />

                      <p.Stack
                        as={"a"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__tIt1H
                        )}
                      >
                        {false ? (
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tVm2Z
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9Jc0M
                          )}
                        >
                          {"Send"}
                        </div>
                        {false ? (
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xTpO
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </div>
          </p.Stack>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__abz2)}>
              <div className={classNames(projectcss.all, sty.freeBox__k6OjB)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___14L7N
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "© Company. All rights reserved. This site proudly built with "
                      }
                    </React.Fragment>
                    {
                      <a
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__h6Wl0
                        )}
                        href={"https://www.plasmic.app"}
                      >
                        {"Plasmic"}
                      </a>
                    }

                    <React.Fragment>{"."}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "h2", "textarea"],
  columns: ["columns", "h2", "textarea"],
  h2: ["h2"],
  textarea: ["textarea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProfil__ArgProps,
          internalVariantPropNames: PlasmicProfil__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProfil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfil";
  } else {
    func.displayName = `PlasmicProfil.${nodeName}`;
  }
  return func;
}

export const PlasmicProfil = Object.assign(
  // Top-level PlasmicProfil renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h2: makeNodeComponent("h2"),
    textarea: makeNodeComponent("textarea"),
    // Metadata about props expected for PlasmicProfil
    internalVariantProps: PlasmicProfil__VariantProps,
    internalArgProps: PlasmicProfil__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProfil;
/* prettier-ignore-end */
